// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Codigoibge")
                        .HasColumnType("int")
                        .HasColumnName("CODIGOIBGE");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("ESTADO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NOME");

                    b.HasKey("Id")
                        .HasName("TB_CIDADE_PK");

                    b.HasIndex("Estado");

                    b.ToTable("TB_CIDADE", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Cultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<decimal>("Precokg")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("PRECOKG");

                    b.HasKey("Id")
                        .HasName("TB_CULTURA_PK");

                    b.ToTable("TB_CULTURA", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Documentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Arquivo")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("ARQUIVO");

                    b.Property<int?>("Imovel")
                        .HasColumnType("int")
                        .HasColumnName("IMOVEL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOME");

                    b.Property<int?>("Pessoa")
                        .HasColumnType("int")
                        .HasColumnName("PESSOA");

                    b.Property<int?>("Proposta")
                        .HasColumnType("int")
                        .HasColumnName("PROPOSTA");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("TIPO");

                    b.HasKey("Id")
                        .HasName("TB_DOCUMENTACAO_PK");

                    b.HasIndex("Imovel");

                    b.HasIndex("Pessoa");

                    b.HasIndex("Proposta");

                    b.HasIndex("Tipo");

                    b.ToTable("TB_DOCUMENTACAO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Codigoibge")
                        .HasColumnType("int")
                        .HasColumnName("CODIGOIBGE");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SIGLA");

                    b.HasKey("Id")
                        .HasName("TB_ESTADO_PK");

                    b.ToTable("TB_ESTADO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<int>("Pessoa")
                        .HasColumnType("int")
                        .HasColumnName("PESSOA");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("SIGLA");

                    b.HasKey("Id")
                        .HasName("TB_FILIAL_PK");

                    b.HasIndex("Pessoa");

                    b.ToTable("TB_FILIAL", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Imovel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Areaagricola")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREAAGRICOLA");

                    b.Property<decimal>("Areapastagem")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREAPASTAGEM");

                    b.Property<decimal>("Areatotal")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREATOTAL");

                    b.Property<byte[]>("Arquivokml")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("ARQUIVOKML");

                    b.Property<int>("Cidade")
                        .HasColumnType("int")
                        .HasColumnName("CIDADE");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LATITUDE");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MATRICULA");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<int>("Proprietario")
                        .HasColumnType("int")
                        .HasColumnName("PROPRIETARIO");

                    b.Property<string>("Roteiroacesso")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("ROTEIROACESSO");

                    b.HasKey("Id")
                        .HasName("TB_IMOVEL_PK");

                    b.HasIndex("Cidade");

                    b.HasIndex("Proprietario");

                    b.ToTable("TB_IMOVEL", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apelido")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("APELIDO");

                    b.Property<string>("Cfta")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("CFTA");

                    b.Property<string>("Cnpjcpf")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("CNPJCPF");

                    b.Property<bool>("Ehtecnico")
                        .HasColumnType("bit")
                        .HasColumnName("EHTECNICO");

                    b.Property<string>("Email")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<string>("Rg")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RG");

                    b.Property<string>("Telefone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TELEFONE");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("TIPO");

                    b.HasKey("Id")
                        .HasName("TB_PESSOA_PK");

                    b.ToTable("TB_PESSOA", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Pessoaendereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BAIRRO");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CEP");

                    b.Property<int>("Cidade")
                        .HasColumnType("int")
                        .HasColumnName("CIDADE");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COMPLEMENTO");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NUMERO");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<int>("Pessoa")
                        .HasColumnType("int")
                        .HasColumnName("PESSOA");

                    b.HasKey("Id")
                        .HasName("TB_PESSOAENDERECO_PK");

                    b.HasIndex("Cidade");

                    b.HasIndex("Pessoa");

                    b.ToTable("TB_PESSOAENDERECO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Proposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Areafinanciada")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREAFINANCIADA");

                    b.Property<int>("Avalista")
                        .HasColumnType("int")
                        .HasColumnName("AVALISTA");

                    b.Property<int>("Carenciameses")
                        .HasColumnType("int")
                        .HasColumnName("CARENCIAMESES");

                    b.Property<int>("Cultura")
                        .HasColumnType("int")
                        .HasColumnName("CULTURA");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA");

                    b.Property<DateTime>("Datacolheita")
                        .HasColumnType("datetime")
                        .HasColumnName("DATACOLHEITA");

                    b.Property<DateTime>("Dataplantio")
                        .HasColumnType("datetime")
                        .HasColumnName("DATAPLANTIO");

                    b.Property<bool>("Ehastecfinanciada")
                        .HasColumnType("bit")
                        .HasColumnName("EHASTECFINANCIADA");

                    b.Property<bool>("Ehpossuilaudoacompanhamento")
                        .HasColumnType("bit")
                        .HasColumnName("EHPOSSUILAUDOACOMPANHAMENTO");

                    b.Property<int>("Filial")
                        .HasColumnType("int")
                        .HasColumnName("FILIAL");

                    b.Property<string>("Linhacredito")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LINHACREDITO");

                    b.Property<int>("Numeroparcela")
                        .HasColumnType("int")
                        .HasColumnName("NUMEROPARCELA");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<string>("Origemrecursoproprio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ORIGEMRECURSOPROPRIO");

                    b.Property<int>("Prazomeses")
                        .HasColumnType("int")
                        .HasColumnName("PRAZOMESES");

                    b.Property<decimal>("Produtividadeesperada")
                        .HasColumnType("decimal(15, 0)")
                        .HasColumnName("PRODUTIVIDADEESPERADA");

                    b.Property<decimal>("Produtividademedia")
                        .HasColumnType("decimal(15, 0)")
                        .HasColumnName("PRODUTIVIDADEMEDIA");

                    b.Property<int>("Proponente")
                        .HasColumnType("int")
                        .HasColumnName("PROPONENTE");

                    b.Property<int>("Responsaveltecnico")
                        .HasColumnType("int")
                        .HasColumnName("RESPONSAVELTECNICO");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<decimal>("Taxajuros")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("TAXAJUROS");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("TIPO");

                    b.Property<decimal>("Valorastec")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORASTEC");

                    b.Property<decimal>("Valortotalfinanciado")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORTOTALFINANCIADO");

                    b.Property<decimal>("Valortotalfinanciamento")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORTOTALFINANCIAMENTO");

                    b.Property<decimal>("Valortotalorcamento")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORTOTALORCAMENTO");

                    b.Property<decimal>("Valortotalrecursoproprio")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORTOTALRECURSOPROPRIO");

                    b.Property<decimal>("Valorunitariofinanciamento")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("VALORUNITARIOFINANCIAMENTO");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("datetime")
                        .HasColumnName("VENCIMENTO");

                    b.HasKey("Id")
                        .HasName("TB_PROPOSTA_PK");

                    b.HasIndex("Avalista");

                    b.HasIndex("Cultura");

                    b.HasIndex("Filial");

                    b.HasIndex("Proponente");

                    b.HasIndex("Responsaveltecnico");

                    b.HasIndex("Tipo");

                    b.ToTable("TB_PROPOSTA", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Propostaimovel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREA");

                    b.Property<int>("Imovel")
                        .HasColumnType("int")
                        .HasColumnName("IMOVEL");

                    b.Property<int>("Proposta")
                        .HasColumnType("int")
                        .HasColumnName("PROPOSTA");

                    b.HasKey("Id")
                        .HasName("TB_PROPOSTAIMOVEL_PK");

                    b.HasIndex("Imovel");

                    b.HasIndex("Proposta");

                    b.ToTable("TB_PROPOSTAIMOVEL", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Propostalaudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datalaudo")
                        .HasColumnType("datetime")
                        .HasColumnName("DATALAUDO");

                    b.Property<DateTime>("Datavistoria")
                        .HasColumnType("datetime")
                        .HasColumnName("DATAVISTORIA");

                    b.Property<bool>("Ehareacultivadafinanciada")
                        .HasColumnType("bit")
                        .HasColumnName("EHAREACULTIVADAFINANCIADA");

                    b.Property<bool>("Ehatendendorecomendacao")
                        .HasColumnType("bit")
                        .HasColumnName("EHATENDENDORECOMENDACAO");

                    b.Property<bool>("Ehcreditoaplicadocorreto")
                        .HasColumnType("bit")
                        .HasColumnName("EHCREDITOAPLICADOCORRETO");

                    b.Property<bool>("Ehcroquiidentificaarea")
                        .HasColumnType("bit")
                        .HasColumnName("EHCROQUIIDENTIFICAAREA");

                    b.Property<bool>("Ehepocaplantiozoneamento")
                        .HasColumnType("bit")
                        .HasColumnName("EHEPOCAPLANTIOZONEAMENTO");

                    b.Property<bool>("Ehlavouraplantadafinanciada")
                        .HasColumnType("bit")
                        .HasColumnName("EHLAVOURAPLANTADAFINANCIADA");

                    b.Property<bool>("Ehpossuiarearecursoproprio")
                        .HasColumnType("bit")
                        .HasColumnName("EHPOSSUIAREARECURSOPROPRIO");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<decimal>("Produtividadeobtida")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("PRODUTIVIDADEOBTIDA");

                    b.Property<decimal>("Produtividadeplano")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("PRODUTIVIDADEPLANO");

                    b.Property<int>("Proposta")
                        .HasColumnType("int")
                        .HasColumnName("PROPOSTA");

                    b.Property<int>("Sequencial")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCIAL");

                    b.Property<string>("Situacaoempreendimento")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SITUACAOEMPREENDIMENTO");

                    b.Property<int>("Status")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.HasKey("Id")
                        .HasName("TB_PROPOSTALAUDO_PK");

                    b.HasIndex("Proposta");

                    b.ToTable("TB_PROPOSTALAUDO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Propostalaudodiagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Areaafetada")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("AREAAFETADA");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DIAGNOSTICO");

                    b.Property<bool>("Ehalterouprodutividade")
                        .HasColumnType("bit")
                        .HasColumnName("EHALTEROUPRODUTIVIDADE");

                    b.Property<bool>("Ehfazercontrole")
                        .HasColumnType("bit")
                        .HasColumnName("EHFAZERCONTROLE");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NIVEL");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<int>("Propostalaudo")
                        .HasColumnType("int")
                        .HasColumnName("PROPOSTALAUDO");

                    b.HasKey("Id")
                        .HasName("TB_PROPOSTALAUDODIAGNOSTICO_PK");

                    b.HasIndex("Propostalaudo");

                    b.ToTable("TB_PROPOSTALAUDODIAGNOSTICO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Tipodocumentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SIGLA");

                    b.HasKey("Id")
                        .HasName("TB_TIPODOCUMENTACAO_PK");

                    b.ToTable("TB_TIPODOCUMENTACAO", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Tipoproposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("OBSERVACAO");

                    b.HasKey("Id")
                        .HasName("TB_TIPOPROPOSTA_PK");

                    b.ToTable("TB_TIPOPROPOSTA", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Tipopropostadocumentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Tipodocumentacao")
                        .HasColumnType("int")
                        .HasColumnName("TIPODOCUMENTACAO");

                    b.Property<int>("Tipoproposta")
                        .HasColumnType("int")
                        .HasColumnName("TIPOPROPOSTA");

                    b.HasKey("Id")
                        .HasName("TB_TIPOPROPOSTADOCUMENTACAO_PK");

                    b.HasIndex("Tipodocumentacao");

                    b.HasIndex("Tipoproposta");

                    b.ToTable("TB_TIPOPROPOSTADOCUMENTACAO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Backend.Models.Cidade", b =>
                {
                    b.HasOne("Backend.Models.Estado", "EstadoNavigation")
                        .WithMany("Cidades")
                        .HasForeignKey("Estado")
                        .IsRequired()
                        .HasConstraintName("TB_ESTADO_TB_CIDADE_fk");

                    b.Navigation("EstadoNavigation");
                });

            modelBuilder.Entity("Backend.Models.Documentacao", b =>
                {
                    b.HasOne("Backend.Models.Imovel", "ImovelNavigation")
                        .WithMany("Documentacoes")
                        .HasForeignKey("Imovel")
                        .HasConstraintName("TB_IMOVEL_TB_DOCUMENTACAO_fk");

                    b.HasOne("Backend.Models.Pessoa", "PessoaNavigation")
                        .WithMany("Documentacoes")
                        .HasForeignKey("Pessoa")
                        .HasConstraintName("TB_PESSOA_TB_DOCUMENTACAO_fk");

                    b.HasOne("Backend.Models.Proposta", "PropostaNavigation")
                        .WithMany("Documentacoes")
                        .HasForeignKey("Proposta")
                        .HasConstraintName("TB_PROPOSTA_TB_DOCUMENTACAO_fk");

                    b.HasOne("Backend.Models.Tipodocumentacao", "TipoNavigation")
                        .WithMany("Documentacoes")
                        .HasForeignKey("Tipo")
                        .IsRequired()
                        .HasConstraintName("TB_TIPODOCUMENTACAO_TB_DOCUMENTACAO_fk");

                    b.Navigation("ImovelNavigation");

                    b.Navigation("PessoaNavigation");

                    b.Navigation("PropostaNavigation");

                    b.Navigation("TipoNavigation");
                });

            modelBuilder.Entity("Backend.Models.Filial", b =>
                {
                    b.HasOne("Backend.Models.Pessoa", "PessoaNavigation")
                        .WithMany("Filiais")
                        .HasForeignKey("Pessoa")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_FILIAL_fk");

                    b.Navigation("PessoaNavigation");
                });

            modelBuilder.Entity("Backend.Models.Imovel", b =>
                {
                    b.HasOne("Backend.Models.Cidade", "CidadeNavigation")
                        .WithMany("Imoveis")
                        .HasForeignKey("Cidade")
                        .IsRequired()
                        .HasConstraintName("TB_CIDADE_TB_IMOVEL_fk");

                    b.HasOne("Backend.Models.Pessoa", "ProprietarioNavigation")
                        .WithMany("Imoveis")
                        .HasForeignKey("Proprietario")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_IMOVEL_fk");

                    b.Navigation("CidadeNavigation");

                    b.Navigation("ProprietarioNavigation");
                });

            modelBuilder.Entity("Backend.Models.Pessoaendereco", b =>
                {
                    b.HasOne("Backend.Models.Cidade", "CidadeNavigation")
                        .WithMany("Pessoaenderecos")
                        .HasForeignKey("Cidade")
                        .IsRequired()
                        .HasConstraintName("TB_CIDADE_TB_PESSOAENDERECO_fk");

                    b.HasOne("Backend.Models.Pessoa", "PessoaNavigation")
                        .WithMany("Pessoaenderecos")
                        .HasForeignKey("Pessoa")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_PESSOAENDERECO_fk");

                    b.Navigation("CidadeNavigation");

                    b.Navigation("PessoaNavigation");
                });

            modelBuilder.Entity("Backend.Models.Proposta", b =>
                {
                    b.HasOne("Backend.Models.Pessoa", "AvalistaNavigation")
                        .WithMany("PropostaAvalistaNavigations")
                        .HasForeignKey("Avalista")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_PROPOSTA_fk2");

                    b.HasOne("Backend.Models.Cultura", "CulturaNavigation")
                        .WithMany("Proposta")
                        .HasForeignKey("Cultura")
                        .IsRequired()
                        .HasConstraintName("TB_CULTURA_TB_PROPOSTA_fk");

                    b.HasOne("Backend.Models.Filial", "FilialNavigation")
                        .WithMany("Proposta")
                        .HasForeignKey("Filial")
                        .IsRequired()
                        .HasConstraintName("TB_FILIAL_TB_PROPOSTA_fk");

                    b.HasOne("Backend.Models.Pessoa", "ProponenteNavigation")
                        .WithMany("PropostaProponenteNavigations")
                        .HasForeignKey("Proponente")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_PROPOSTA_fk");

                    b.HasOne("Backend.Models.Pessoa", "ResponsaveltecnicoNavigation")
                        .WithMany("PropostaResponsaveltecnicoNavigations")
                        .HasForeignKey("Responsaveltecnico")
                        .IsRequired()
                        .HasConstraintName("TB_PESSOA_TB_PROPOSTA_fk1");

                    b.HasOne("Backend.Models.Tipoproposta", "TipoNavigation")
                        .WithMany("Proposta")
                        .HasForeignKey("Tipo")
                        .IsRequired()
                        .HasConstraintName("TB_TIPOPROPOSTA_TB_PROPOSTA_fk");

                    b.Navigation("AvalistaNavigation");

                    b.Navigation("CulturaNavigation");

                    b.Navigation("FilialNavigation");

                    b.Navigation("ProponenteNavigation");

                    b.Navigation("ResponsaveltecnicoNavigation");

                    b.Navigation("TipoNavigation");
                });

            modelBuilder.Entity("Backend.Models.Propostaimovel", b =>
                {
                    b.HasOne("Backend.Models.Imovel", "ImovelNavigation")
                        .WithMany("Propostaimoveis")
                        .HasForeignKey("Imovel")
                        .IsRequired()
                        .HasConstraintName("TB_IMOVEL_TB_PROPOSTAIMOVEL_fk");

                    b.HasOne("Backend.Models.Proposta", "PropostaNavigation")
                        .WithMany("Propostaimoveis")
                        .HasForeignKey("Proposta")
                        .IsRequired()
                        .HasConstraintName("TB_PROPOSTA_TB_PROPOSTAIMOVEL_fk");

                    b.Navigation("ImovelNavigation");

                    b.Navigation("PropostaNavigation");
                });

            modelBuilder.Entity("Backend.Models.Propostalaudo", b =>
                {
                    b.HasOne("Backend.Models.Proposta", "PropostaNavigation")
                        .WithMany("Propostalaudos")
                        .HasForeignKey("Proposta")
                        .IsRequired()
                        .HasConstraintName("TB_PROPOSTA_TB_PROPOSTAACOMPANHAMENTO_fk");

                    b.Navigation("PropostaNavigation");
                });

            modelBuilder.Entity("Backend.Models.Propostalaudodiagnostico", b =>
                {
                    b.HasOne("Backend.Models.Propostalaudo", "PropostalaudoNavigation")
                        .WithMany("Propostalaudodiagnosticos")
                        .HasForeignKey("Propostalaudo")
                        .IsRequired()
                        .HasConstraintName("TB_PROPOSTALAUDO_TB_PROPOSTALAUDODIAGNOSTICO_fk");

                    b.Navigation("PropostalaudoNavigation");
                });

            modelBuilder.Entity("Backend.Models.Tipopropostadocumentacao", b =>
                {
                    b.HasOne("Backend.Models.Tipodocumentacao", "TipodocumentacaoNavigation")
                        .WithMany("Tipopropostadocumentacoes")
                        .HasForeignKey("Tipodocumentacao")
                        .IsRequired()
                        .HasConstraintName("TB_TIPODOCUMENTACAO_TB_TIPOPROPOSTADOCUMENTACAO_fk");

                    b.HasOne("Backend.Models.Tipoproposta", "TipopropostaNavigation")
                        .WithMany("Tipopropostadocumentacoes")
                        .HasForeignKey("Tipoproposta")
                        .IsRequired()
                        .HasConstraintName("TB_TIPOPROPOSTA_TB_TIPOPROPOSTADOCUMENTACAO_fk");

                    b.Navigation("TipodocumentacaoNavigation");

                    b.Navigation("TipopropostaNavigation");
                });

            modelBuilder.Entity("Backend.Models.Cidade", b =>
                {
                    b.Navigation("Imoveis");

                    b.Navigation("Pessoaenderecos");
                });

            modelBuilder.Entity("Backend.Models.Cultura", b =>
                {
                    b.Navigation("Proposta");
                });

            modelBuilder.Entity("Backend.Models.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("Backend.Models.Filial", b =>
                {
                    b.Navigation("Proposta");
                });

            modelBuilder.Entity("Backend.Models.Imovel", b =>
                {
                    b.Navigation("Documentacoes");

                    b.Navigation("Propostaimoveis");
                });

            modelBuilder.Entity("Backend.Models.Pessoa", b =>
                {
                    b.Navigation("Documentacoes");

                    b.Navigation("Filiais");

                    b.Navigation("Imoveis");

                    b.Navigation("Pessoaenderecos");

                    b.Navigation("PropostaAvalistaNavigations");

                    b.Navigation("PropostaProponenteNavigations");

                    b.Navigation("PropostaResponsaveltecnicoNavigations");
                });

            modelBuilder.Entity("Backend.Models.Proposta", b =>
                {
                    b.Navigation("Documentacoes");

                    b.Navigation("Propostaimoveis");

                    b.Navigation("Propostalaudos");
                });

            modelBuilder.Entity("Backend.Models.Propostalaudo", b =>
                {
                    b.Navigation("Propostalaudodiagnosticos");
                });

            modelBuilder.Entity("Backend.Models.Tipodocumentacao", b =>
                {
                    b.Navigation("Documentacoes");

                    b.Navigation("Tipopropostadocumentacoes");
                });

            modelBuilder.Entity("Backend.Models.Tipoproposta", b =>
                {
                    b.Navigation("Proposta");

                    b.Navigation("Tipopropostadocumentacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
